#!/usr/bin/env node

/**
 * Module dependencies.
 */

 const app = require('../../app');
 const debug = require('debug')('personal-website:server');
 const http = require('http');
 const https = require('https');
 const fs = require('fs');
 
 /**
  * Get port from environment and store in Express.
  */
 
 const privateKey = fs.readFileSync('/etc/letsencrypt/live/ru-pirie.com/privkey.pem', 'utf8');
 const certificate = fs.readFileSync('/etc/letsencrypt/live/ru-pirie.com/cert.pem', 'utf8');
 const ca = fs.readFileSync('/etc/letsencrypt/live/ru-pirie.com/chain.pem', 'utf8');
 
 const credentials = {
	 key: privateKey,
	 cert: certificate,
	 ca: ca,
 };
 
 const port = normalizePort(process.env.PORT || '80');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  */
 
 const httpserver = http.createServer(app);
 const httpsserver = https.createServer(credentials, app);
 
 /**
  * Listen on provided port, on all network interfaces.
  */
 
 httpserver.listen('80');
 httpsserver.listen('443');
 httpserver.on('error', onError);
 httpsserver.on('error', onError);
 httpserver.on('listening', onListening);
 httpsserver.on('listening', onListening);
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
	 const port = parseInt(val, 10);
 
	 if (isNaN(port)) {
		 // named pipe
		 return val;
	 }
 
	 if (port >= 0) {
		 // port number
		 return port;
	 }
 
	 return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
	 if (error.syscall !== 'listen') {
		 throw error;
	 }
 
	 const bind = typeof port === 'string'
		 ? 'Pipe ' + port
		 : 'Port ' + port;
 
	 // handle specific listen errors with friendly messages
	 switch (error.code) {
		 case 'EACCES':
			 console.error(bind + ' requires elevated privileges');
			 process.exit(1);
			 break;
		 case 'EADDRINUSE':
			 console.error(bind + ' is already in use');
			 process.exit(1);
			 break;
		 default:
			 throw error;
	 }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
	 const addr = httpserver.address();
	 const bind = typeof addr === 'string'
		 ? 'pipe ' + addr
		 : 'port ' + addr.port;
	 debug('Listening on ' + bind);
 }
 